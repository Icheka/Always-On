{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/icheka/Work/Personal Projects/React Native/Always On Music Streaming Service/components/Player/index.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { Audio } from 'expo-av';\nimport { audioPlaylist } from \"../../services/songs\";\nimport Header from \"./cores/header\";\nimport PlayerAlbumArt from \"./cores/albumart\";\nimport TrackInfo from \"./cores/trackinfo\";\nimport Controls from \"./cores/controls\";\nimport Seek from \"./cores/seek\";\nimport CustomButton from \"./cores/button\";\nimport ButtonGroup from \"./cores/buttongroup\";\nimport { globalStyle } from \"../../assets/global.style\";\n\nvar Player = function (_Component) {\n  _inherits(Player, _Component);\n\n  var _super = _createSuper(Player);\n\n  function Player(props) {\n    var _this;\n\n    _classCallCheck(this, Player);\n\n    _this = _super.call(this, props);\n\n    _this.onPlaybackStatusUpdate = function (status) {\n      _this.setState({\n        isBuffering: status.isBuffering\n      });\n    };\n\n    _this.handlePlayPause = function _callee() {\n      var _this$state, isPlaying, playbackInstance;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$state = _this.state, isPlaying = _this$state.isPlaying, playbackInstance = _this$state.playbackInstance;\n\n              if (!isPlaying) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(playbackInstance.pauseAsync());\n\n            case 4:\n              _context.next = 8;\n              break;\n\n            case 6:\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(playbackInstance.playAsync());\n\n            case 8:\n              _this.setState({\n                isPlaying: !isPlaying\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.handlePlayPrevious = function _callee2() {\n      var _this$state2, playbackInstance, currentIndex;\n\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _this$state2 = _this.state, playbackInstance = _this$state2.playbackInstance, currentIndex = _this$state2.currentIndex;\n\n              if (!playbackInstance) {\n                _context2.next = 7;\n                break;\n              }\n\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(playbackInstance.unloadAsync());\n\n            case 4:\n              currentIndex < audioPlaylist.length - 1 ? currentIndex -= 1 : currentIndex = 0;\n\n              _this.setState({\n                currentIndex: currentIndex\n              });\n\n              _this.loadAudio();\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.handlePlayNext = function _callee3() {\n      var _this$state3, playbackInstance, currentIndex;\n\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _this$state3 = _this.state, playbackInstance = _this$state3.playbackInstance, currentIndex = _this$state3.currentIndex;\n\n              if (!playbackInstance) {\n                _context3.next = 7;\n                break;\n              }\n\n              _context3.next = 4;\n              return _regeneratorRuntime.awrap(playbackInstance.unloadAsync());\n\n            case 4:\n              currentIndex < audioPlaylist.length - 1 ? currentIndex += 1 : currentIndex = 0;\n\n              _this.setState({\n                currentIndex: currentIndex\n              });\n\n              _this.loadAudio();\n\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    var initState = {\n      playbackInstance: null,\n      currentIndex: 0,\n      isPlaying: false,\n      track: {\n        index: '',\n        song: '',\n        artiste: '',\n        duration: '',\n        albumArt: ''\n      },\n      volume: 1.0,\n      isBuffering: false\n    };\n    _this.state = _objectSpread({}, initState);\n    return _this;\n  }\n\n  _createClass(Player, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: globalStyle.player,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }\n      }, React.createElement(Header, {\n        nowPlaying: \"Now Playing from Billboard Top 100\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }\n      }), React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }\n      }, React.createElement(PlayerAlbumArt, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }\n      }), React.createElement(TrackInfo, {\n        track: {\n          song: this.state.track.song,\n          artiste: this.state.track.artiste\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }\n      }), React.createElement(Controls, {\n        next: function next() {\n          return _this2.handlePlayNext();\n        },\n        previous: function previous() {\n          return _this2.handlePlayPrevious();\n        },\n        pause: function pause() {\n          return _this2.handlePlayPause();\n        },\n        playing: this.state.isPlaying,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }\n      }), React.createElement(Seek, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }\n      }), React.createElement(ButtonGroup, {\n        style: {\n          marginTop: 25\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }\n      }, React.createElement(CustomButton, {\n        icon: \"heart\",\n        title: \"Like this\",\n        color: \"darkred\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }\n      }), React.createElement(CustomButton, {\n        icon: \"retweet\",\n        title: \"Share this\",\n        color: \"darkred\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }\n      }))));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return _regeneratorRuntime.awrap(Audio.setAudioModeAsync({\n                allowsRecordingIOS: false,\n                interruptionModeIOS: Audio.INTERRUPTION_MODE_IOS_DO_NOT_MIX,\n                interruptionModeAndroid: Audio.INTERRUPTION_MODE_ANDROID_DUCK_OTHERS,\n                playsInSilentModeIOS: true,\n                shouldDuckAndroid: true,\n                staysActiveInBackground: true,\n                playThroughEarpieceAndroid: true\n              }));\n\n            case 3:\n              this.loadAudio();\n              console.log('App loaded. Loading audio file at index 0');\n              _context4.next = 10;\n              break;\n\n            case 7:\n              _context4.prev = 7;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.log(\"Error fetching audio via Audio API :>>\", _context4.t0);\n\n            case 10:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, [[0, 7]], Promise);\n    }\n  }, {\n    key: \"loadAudio\",\n    value: function loadAudio() {\n      var _this$state4, currentIndex, isPlaying, volume, playbackInstance, source, status;\n\n      return _regeneratorRuntime.async(function loadAudio$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _this$state4 = this.state, currentIndex = _this$state4.currentIndex, isPlaying = _this$state4.isPlaying, volume = _this$state4.volume;\n              _context5.prev = 1;\n              playbackInstance = new Audio.Sound();\n              source = {\n                uri: audioPlaylist[currentIndex].uri\n              };\n              status = {\n                shouldPlay: isPlaying,\n                volume: volume\n              };\n              playbackInstance.setOnPlaybackStatusUpdate(this.onPlaybackStatusUpdate);\n              _context5.next = 8;\n              return _regeneratorRuntime.awrap(playbackInstance.loadAsync(source, status, false));\n\n            case 8:\n              this.setState({\n                playbackInstance: playbackInstance\n              });\n              this.setState({\n                track: _objectSpread(_objectSpread({}, this.state.track), {}, {\n                  song: audioPlaylist[currentIndex].title,\n                  artiste: audioPlaylist[currentIndex].author\n                })\n              });\n              _context5.next = 15;\n              break;\n\n            case 12:\n              _context5.prev = 12;\n              _context5.t0 = _context5[\"catch\"](1);\n              console.log(\"Audio was loaded but is unable to play :>>\", _context5.t0);\n\n            case 15:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, this, [[1, 12]], Promise);\n    }\n  }]);\n\n  return Player;\n}(Component);\n\nexport { Player as default };","map":{"version":3,"sources":["/home/icheka/Work/Personal Projects/React Native/Always On Music Streaming Service/components/Player/index.jsx"],"names":["React","Component","Audio","audioPlaylist","Header","PlayerAlbumArt","TrackInfo","Controls","Seek","CustomButton","ButtonGroup","globalStyle","Player","props","onPlaybackStatusUpdate","status","setState","isBuffering","handlePlayPause","state","isPlaying","playbackInstance","pauseAsync","playAsync","handlePlayPrevious","currentIndex","unloadAsync","length","loadAudio","handlePlayNext","initState","track","index","song","artiste","duration","albumArt","volume","player","marginTop","setAudioModeAsync","allowsRecordingIOS","interruptionModeIOS","INTERRUPTION_MODE_IOS_DO_NOT_MIX","interruptionModeAndroid","INTERRUPTION_MODE_ANDROID_DUCK_OTHERS","playsInSilentModeIOS","shouldDuckAndroid","staysActiveInBackground","playThroughEarpieceAndroid","console","log","Sound","source","uri","shouldPlay","setOnPlaybackStatusUpdate","loadAsync","title","author"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { View } from 'react-native';\n\n// services \nimport { Audio } from 'expo-av';\nimport { audioPlaylist } from '../../services/songs';\n\n// cores \nimport Header from './cores/header';\nimport PlayerAlbumArt from './cores/albumart';\nimport TrackInfo from './cores/trackinfo';\nimport Controls from './cores/controls';\nimport Seek from './cores/seek';\nimport CustomButton from './cores/button';\nimport ButtonGroup from './cores/buttongroup';\nimport { globalStyle } from '../../assets/global.style';\n\nexport default class Player extends Component {\n    constructor(props) {\n        super(props);\n        const initState = {\n            playbackInstance: null,\n            currentIndex: 0,\n            isPlaying: false,\n            track: {\n                index: '',\n                song: '',\n                artiste: '',\n                duration: '',\n                albumArt: ''\n            },\n            volume: 1.0,\n            isBuffering: false\n        }\n        this.state = {\n            ...initState\n        };\n    }\n    render() {\n        return (\n            <View style={ globalStyle.player }>\n                <Header nowPlaying={\"Now Playing from Billboard Top 100\"} />\n                <View>\n                    <PlayerAlbumArt />\n                    <TrackInfo track={{ song: this.state.track.song, artiste: this.state.track.artiste }} />\n                    <Controls\n                        next={ () => this.handlePlayNext() }\n                        previous={ () => this.handlePlayPrevious() }\n                        pause={ () => this.handlePlayPause() }\n                        playing={this.state.isPlaying}\n                    />\n                    <Seek />\n                    <ButtonGroup style={{ marginTop: 25 }}>\n                        <CustomButton \n                            icon=\"heart\"\n                            title=\"Like this\"\n                            color=\"darkred\"\n                        />\n                        <CustomButton \n                            icon=\"retweet\"\n                            title=\"Share this\"\n                            color=\"darkred\"\n                        />\n                    </ButtonGroup>\n                </View>\n            </View>\n        )\n    }\n\n    async componentDidMount() {\n        try {\n            await Audio.setAudioModeAsync({\n                allowsRecordingIOS: false,\n                interruptionModeIOS: Audio.INTERRUPTION_MODE_IOS_DO_NOT_MIX,\n                interruptionModeAndroid: Audio.INTERRUPTION_MODE_ANDROID_DUCK_OTHERS,\n                playsInSilentModeIOS: true,\n                shouldDuckAndroid: true,\n                staysActiveInBackground: true,\n                playThroughEarpieceAndroid: true\n            });\n            this.loadAudio();\n            console.log('App loaded. Loading audio file at index 0')\n        } catch (err) {\n            console.log(\"Error fetching audio via Audio API :>>\", err);\n        }\n    }\n\n    async loadAudio() {\n        const {currentIndex, isPlaying, volume} = this.state;\n        try {\n            const playbackInstance = new Audio.Sound();\n            const source = {\n                uri: audioPlaylist[currentIndex].uri\n            }\n            const status = {\n                shouldPlay: isPlaying,\n                volume\n            }\n\n            playbackInstance.setOnPlaybackStatusUpdate(this.onPlaybackStatusUpdate);\n            await playbackInstance.loadAsync(source, status, false);\n            this.setState({ playbackInstance });\n            this.setState({\n                track: {\n                    ...this.state.track,\n                    song: audioPlaylist[currentIndex].title,\n                    artiste: audioPlaylist[currentIndex].author\n                }\n            })\n        } catch (err) {\n            console.log(\"Audio was loaded but is unable to play :>>\", err);\n        }\n    }\n\n    onPlaybackStatusUpdate = status => {\n        this.setState({\n            isBuffering: status.isBuffering\n        });\n    }\n\n    handlePlayPause = async () => {\n        const { isPlaying, playbackInstance } = this.state;\n        isPlaying ? await playbackInstance.pauseAsync() : await playbackInstance.playAsync();\n\n        this.setState({ isPlaying: !isPlaying });\n    }\n\n    handlePlayPrevious = async () => {\n        let { playbackInstance, currentIndex } = this.state;\n        if (playbackInstance) {\n            await playbackInstance.unloadAsync();\n            currentIndex < audioPlaylist.length - 1 ? (currentIndex -= 1) : (currentIndex = 0);\n            this.setState({\n                currentIndex\n            });\n            this.loadAudio();\n        }\n    }\n\n    handlePlayNext = async () => {\n        let { playbackInstance, currentIndex } = this.state;\n        if (playbackInstance) {\n            await playbackInstance.unloadAsync();\n            currentIndex < audioPlaylist.length - 1 ? (currentIndex += 1) : (currentIndex = 0);\n            this.setState({\n                currentIndex\n            });\n            this.loadAudio();\n        }\n    }\n\n}"]},"metadata":{},"sourceType":"module"}